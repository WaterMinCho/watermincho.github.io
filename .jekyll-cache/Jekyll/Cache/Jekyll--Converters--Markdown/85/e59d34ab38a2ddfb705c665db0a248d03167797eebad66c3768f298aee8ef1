I"^J<h2 id="2048게임-자바스크립트-프로젝트-2회차"><strong>2048게임 (자바스크립트 프로젝트 2회차)</strong></h2>

<h3 id="20210518"><code class="language-plaintext highlighter-rouge">2021.05.18</code></h3>

<h4 id="소스코드-2048html"><span style="color:navy">소스코드: <a href="https://github.com/WaterMinCho/JS/blob/main/2048.html" target="\_blank">2048.html</a></span></h4>

<hr />

<h3 id="플로우"><strong>플로우</strong></h3>

<ul>
  <li>
    <center><img src="https://user-images.githubusercontent.com/74204327/118597672-f2934c00-b7e7-11eb-8db1-3b9a8595c87e.png" width="80%" height="auto" alt="2048" /></center>
  </li>
</ul>

<hr />

<h3 id="배운-개념"><strong>배운 개념</strong></h3>

<p><span style="color:red">1. <a href="#documentfragment">DocumentFragment</a></span><br />
<span style="color:red">2. <a href="#마우스-이벤트">마우스 이벤트</a></span><br />
<span style="color:red">3. <a href="#실습코드-설명">실습코드 설명</a></span><br /></p>

<hr />

<ul>
  <li>
    <h4 id="documentfragment">DocumentFragment</h4>

    <ul>
      <li>노드를 새로 생성하여 사용한다면 <code class="language-plaintext highlighter-rouge">Real DOM</code>트리 외부에 경량화된 DOM을 만들 수 있다. 마치 <code class="language-plaintext highlighter-rouge">Real DOM</code>트리처럼 작동하되, 메모리 상에서만 존재하는 빈 문서 템플릿이라고 생각하면 된다.</li>
      <li>최적화 방법 중 하나라는데, 실습예제와 같이 <code class="language-plaintext highlighter-rouge">Table-&gt;tr-&gt;td</code> 순으로 가져온다 가정하면 tr이 만약 수없이 많다면 DOM의 객체 접근이 수없이 이루어지는데, <code class="language-plaintext highlighter-rouge">Table-&gt;Fragment-&gt;tr-&gt;td</code> 순으로 이루어 지면 가짜 DOM 상에 수많은 tr들이 메모리에 쌓여있는 채로 대기중일 것이다. 그리고 <code class="language-plaintext highlighter-rouge">Fragment</code>를 호출하면 <code class="language-plaintext highlighter-rouge">Real DOM</code>은 <code class="language-plaintext highlighter-rouge">가짜 DOM</code>에 한번 접근하여 Table에 tr들을 한번에 가져올 수 있게 되는 것이다. 이러한 형식의 세트를 많이 갖고 있는 프로그램이라면 더더욱 필요한 최적화 형식이 아닌가 싶다.</li>
      <li>참고로 최신 브라우저의 경우에는 <code class="language-plaintext highlighter-rouge">리플로우(reflow)</code>가 발생하지 않도록 엔진을 최적화하기 때문에 <code class="language-plaintext highlighter-rouge">DocumentFragment</code> 객체를 사용할 때 발생하는 성능 향상을 체감할 수 없는 경우도 있다. 그러나 막대한 크기의 DOM 객체에 대한 다수의 접근을 필요로하는 작업을 수행해야하는 상황에서 <code class="language-plaintext highlighter-rouge">DocumentFragment</code> 객체를 이용한다면, 만족할만한 성능 향상을 기대할 수 있을 것이다.</li>
    </ul>
  </li>
</ul>

<hr />

<ul>
  <li>
    <h4 id="마우스-이벤트">마우스 이벤트</h4>
    <ul>
      <li>마우스 이벤트의 속성을 보면 x,y좌표를 얻을 수 있는데, 좌표에는 여러 종류가 있다. x좌표로는 <code class="language-plaintext highlighter-rouge">clientX,offsetX,pageX,screenX,movementX</code>가 있고, y도 동일하다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">clientX, clientY</code>는 브라우저 페이지 내의 x,y좌표를 가리킨다(픽셀).</li>
          <li><code class="language-plaintext highlighter-rouge">pageX와 pageY</code>도 브라우저 페이지 내의 x,y좌표를 가리키지만 <code class="language-plaintext highlighter-rouge">스크롤</code>이 있으면 스크롤한 픽셀값까지 포함한다.</li>
          <li><code class="language-plaintext highlighter-rouge">offsetX, offsetY</code>는 이벤트를 연결한 대상을 기준으로 마우스의 x,y좌표를 가져온다. 실습에선 window에 이벤트를 걸어서<code class="language-plaintext highlighter-rouge"> clientX, clientY</code>와 동일하지만, 페이지 내의 다른 태그에 마우스 이벤트를 걸면 해당 태그의 왼쪽 모서리 좌표가 0이 된다.</li>
          <li><code class="language-plaintext highlighter-rouge">screenX, screenY</code>는 모니터를 기준으로 하여 모니터의 왼쪽 모서리가 0이 된다.</li>
          <li><code class="language-plaintext highlighter-rouge">movementX, movementY</code>는 <code class="language-plaintext highlighter-rouge">mousemove</code>이벤트와 비교하여 얼마나 마우스를 움직였는지 표시한다. 따라서 mousemove이벤트인 경우에만 값이 잡힌다.</li>
          <li>마우스 방향을 판단할 때는 <code class="language-plaintext highlighter-rouge">mousedown</code>과 <code class="language-plaintext highlighter-rouge">mouseup</code>이벤트만 필요하다.</li>
        </ul>
        <center><img src="https://user-images.githubusercontent.com/74204327/118618148-4c067580-b7fe-11eb-880b-50947337e791.png" width="80%" height="auto" alt="2048" /></center>
      </li>
    </ul>
  </li>
</ul>

<hr />

<ul>
  <li>
    <h4 id="실습코드-설명">실습코드 설명</h4>
    <p><code class="language-plaintext highlighter-rouge">javascript let startCoord; window.addEventListener("mousedown", (event) =&gt; { startCoord = [event.clientX, event.clientY]; }); window.addEventListener("mouseup", (event) =&gt; { const endCoord = [event.clientX, event.clientY]; const diffX = endCoord[0] - startCoord[0]; const diffY = endCoord[1] - startCoord[1]; if (diffX &lt; 0 &amp;&amp; Math.abs(diffX) &gt; Math.abs(diffY)) { moveCells("left"); } else if (diffX &gt; 0 &amp;&amp; Math.abs(diffX) &gt; Math.abs(diffY)) { moveCells("right"); } else if (diffX &gt; 0 &amp;&amp; Math.abs(diffX) &lt;= Math.abs(diffY)) { moveCells("down"); } else if (diffX &lt; 0 &amp;&amp; Math.abs(diffX) &lt;= Math.abs(diffY)) { moveCells("up"); } }); </code> - Math.abs는 절댓값 도출메서드다. - 마우스 클릭 때 startCoord변수로 기준좌표를 지정했다.(mousedown이벤트 당시의 clientX와 clientY값.) - 마우스 클릭을 뗐을 때 endCoord변수로 마지막 좌표를 지정했다.(mouseup이벤트 당시의 clientX와 clientY값.) - diffX와 diffY는 1차함수의 기울기공식의 일부다. diffX(X좌표 증가량-X좌표기준), diffY(Y좌표 증가량-Y좌표기준.) - diffX가 0보다 작고 diffY보다 절댓값이 크면 기준좌표값인 startCoord보다 왼쪽에 있다고 판단한다. - diffX가 0보다 크고 diffY보다 절댓값이 크면 기준좌표값인 startCoord보다 오른쪽에 있다고 판단한다. - diffX가 0보다 크고 diffY보다 절댓값이 작거나 같으면 기준좌표값인 startCoord보다 아래에 있다고 판단한다. - diffX가 0보다 작고 diffY보다 절댓값이 크면 기준좌표값인 startCoord보다 위에 있다고 판단한다.</p>
  </li>
</ul>

<h2 id="지뢰찾기자바스크립트-프로젝트-1회차"><strong>지뢰찾기(자바스크립트 프로젝트 1회차)</strong></h2>

<h3 id="20210514"><code class="language-plaintext highlighter-rouge">2021.05.14</code></h3>

<h4 id="소스코드-mine-sweeperhtml"><span style="color:navy">소스코드: <a href="https://github.com/WaterMinCho/JS/blob/main/mine-sweeper.html" target="\_blank">mine-sweeper.html</a></span></h4>

<hr />

<h3 id="플로우-1"><strong>플로우</strong></h3>

<ul>
  <li>
    <p>기본적으로 좌클릭을 했을 때랑 우클릭을 했을 때를 나눠서 처리해야 한다.</p>

    <ul>
      <li>
        <center><img src="https://user-images.githubusercontent.com/74204327/118597672-f2934c00-b7e7-11eb-8db1-3b9a8595c87e.png" width="80%" height="auto" alt="알고리즘" /></center>
      </li>
      <li>
        <center><img src="https://user-images.githubusercontent.com/74204327/118239686-11869b00-b4d5-11eb-96ef-66e8e38a1473.png" width="80%" height="auto" alt="알고리즘" /></center>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="배운-개념-1"><strong>배운 개념</strong></h3>

<p><span style="color:red">1. <a href="#상태에-따른-코드-정의">상태에 따른 코드 정의</a></span><br />
<span style="color:red">2. <a href="#순서">코드 작성 순서</a></span><br />
<span style="color:red">3. <a href="#optional-chaining">Optional Chaining</a></span><br />
<span style="color:red">4. <a href="#nullish-coalescing-operatornull-병합-연산자">nullish coalescing operator</a> </span><br />
<span style="color:red">5. <a href="#maximum-call-stack-size-exceeded-에러">Maximum call stack size exceeded 에러</a> </span><br /></p>

<hr />

<ul>
  <li>
    <h3 id="상태에-따른-코드-정의">상태에 따른 코드 정의</h3>

    <p>상태값에 따른 코드를 정의할 때 보통 숫자로 지정하는데 여러 번 시뮬레이션을 한 뒤에 최적의 숫자조합을 찾는 것이 현명하다.<br />
코드숫자는 0~8까지 열린 칸<br />
지뢰가 없을 때 <code class="language-plaintext highlighter-rouge">닫힌 칸(NORMAL)</code>은 -1, <code class="language-plaintext highlighter-rouge">물음표칸(QUESTION)</code>은 -2, <code class="language-plaintext highlighter-rouge">깃발 칸(FLAG)</code>은 -3.<br />
지뢰가 있을 때 <code class="language-plaintext highlighter-rouge">닫힌 칸은(MINE)</code> -4, <code class="language-plaintext highlighter-rouge">물음표칸(QUESTION_MINE)</code>은 -5, <code class="language-plaintext highlighter-rouge">깃발 칸(FLAG_MINE)</code>은 -6
<br /></p>
  </li>
</ul>

<hr />

<ul>
  <li>
    <h3 id="순서">순서</h3>

    <ol>
      <li>배열<code class="language-plaintext highlighter-rouge">candidate</code>에 빈 공간을 만들고 그 공간에 0부터 99까지 채워넣는다.</li>
      <li><code class="language-plaintext highlighter-rouge">chosen</code>배열에 <code class="language-plaintext highlighter-rouge">mine</code>갯수인 10개를 뺀 공간에 랜덤으로 채워넣는다.</li>
      <li>이차원 배열로 <code class="language-plaintext highlighter-rouge">rowData</code>배열에 <code class="language-plaintext highlighter-rouge">CODE.NORMAL(-1)</code>을 채워넣는다.</li>
      <li>랜덤하게 생성된 지뢰 칸 위치(shuffle[k])에 MINE(-6)을 data[][]에채워넣는다.</li>
      <li><code class="language-plaintext highlighter-rouge">onRightClick</code>함수 생성 후 <code class="language-plaintext highlighter-rouge">preventDefault</code>로 기본동작 제거. <code class="language-plaintext highlighter-rouge">target</code>으로 html코드 불러올 수 있음.</li>
      <li><code class="language-plaintext highlighter-rouge">$tbody.addEventListener("contextmenu", onRightClick);</code>에서 <code class="language-plaintext highlighter-rouge">contextmenu</code>는 우클릭이벤트인데 해당 이벤트 콜백을 <code class="language-plaintext highlighter-rouge">onRightClick</code>으로 적용.</li>
      <li><code class="language-plaintext highlighter-rouge">onLeftClick()</code>을 선언 후 닫힌 칸인지 지뢰칸(<code class="language-plaintext highlighter-rouge">지뢰칸이면 removeEventListener.</code>)인지 여부 판단 함.</li>
      <li><code class="language-plaintext highlighter-rouge">countMine()</code>도 정의해서 주변 지뢰갯수를 카운트한다.</li>
      <li>지뢰게임은 지뢰를 제외한 나머지 칸을 모두 열면 승리하는 게임이고 주변 지뢰개수가 0개인 칸을 클릭하면 자동으로 주변 칸을 모두 열어주는 기능도 넣어야 한다.</li>
      <li><code class="language-plaintext highlighter-rouge">openAround(), isNormal(), open()</code>을 정의해서 <code class="language-plaintext highlighter-rouge">open이 0</code>이면 <code class="language-plaintext highlighter-rouge">openAround</code>가 주변을 열어준다.</li>
      <li>승리하는 케이스일때 추가. 100칸 중에 10칸을 제외한 90칸을 모두 열면 승리하는 조건 추가하면 된다.</li>
      <li>줄, 칸, 지뢰 개수 조절하기–&gt;row,cell,mine변수에 input으로 submit할 수 있도록 세팅. submit하면 openCount초기화, tbody지우고 drawTable()실행, timer시작. –&gt; 해당하는 변수들을 let으로 수정.</li>
    </ol>
  </li>
</ul>

<hr />

<ul>
  <li>
    <h3 id="optional-chaining">Optional Chaining</h3>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">?.</code>
        <ul>
          <li>앞 평가 대상이 undefined나 null이면 평가를 멈추고 undefined를 반환한다. <code class="language-plaintext highlighter-rouge">.?</code>는 존재하지 않아도 괜찮은 대상에만 사용해야 한다.<br />
자바스크립트에선 배열에 음수번째 인덱스를 넣으면 <code class="language-plaintext highlighter-rouge">undefined</code>가 난다.<code class="language-plaintext highlighter-rouge">(undefined[-1])</code>
            <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
<span class="nx">data</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>            </div>
            <p>이런 식으로 커버할 수 있으며, 또는 접근자 <code class="language-plaintext highlighter-rouge">. 앞에 ?</code>를 붙이면 조건접근이 가능하다.</p>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">mines.includes(data[rowIndex - 1]?.[cellIndex - 1]) &amp;&amp; i++;</code>
        <ul>
          <li>data[][]가 존재하면 i++실행.</li>
        </ul>
      </li>
      <li>문법
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">obj</span><span class="p">?.</span><span class="nx">prop</span><span class="p">;</span>
<span class="nx">obj</span><span class="p">?.[</span><span class="nx">expr</span><span class="p">];</span>
<span class="nx">arr</span><span class="p">?.[</span><span class="nx">index</span><span class="p">];</span>
<span class="nx">func</span><span class="p">?.(</span><span class="nx">args</span><span class="p">);</span>
</code></pre></div>        </div>
      </li>
      <li>.연산자는 <code class="language-plaintext highlighter-rouge">nullish참조값</code>일 때 에러를 뱉고 <code class="language-plaintext highlighter-rouge">?.</code>연산자는 에러 대신 <code class="language-plaintext highlighter-rouge">undefined</code>를 리턴하는 차이가 있다.</li>
      <li>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">aProp</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">first</span><span class="p">?.</span><span class="nx">second</span><span class="p">;</span>
</code></pre></div>        </div>
        <p><code class="language-plaintext highlighter-rouge">obj.first.second</code>에 접근하기 전에 <code class="language-plaintext highlighter-rouge">obj.first가 nullish가 아니라는 것을 암묵적으로 확인했다는 뜻</code>이다. 만약 <code class="language-plaintext highlighter-rouge">obj.first가 nullish라면</code> 그 표현식은 자동으로 잘리고 <code class="language-plaintext highlighter-rouge">undefined가 반환</code>된다. 추가로 아래와 같이 풀어낼 수 있다. (참고:MDN)</p>
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">aProp</span> <span class="o">=</span>
  <span class="nx">obj</span><span class="p">.</span><span class="nx">first</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">first</span> <span class="o">===</span> <span class="kc">undefined</span>
    <span class="p">?</span> <span class="kc">undefined</span>
    <span class="p">:</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">first</span><span class="p">.</span><span class="nx">second</span><span class="p">;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<hr />

<ul>
  <li>
    <h3 id="nullish-coalescing-operatornull-병합-연산자">nullish coalescing operator(null 병합 연산자)</h3>

    <p><code class="language-plaintext highlighter-rouge">??, ||, &amp;&amp;</code>를 추가로 설명하면 기존에 and, or처럼 판단을 해왔지만 엄밀히 논리적으로 따지면 아래와 같다.</p>

    <ul>
      <li>target.textContent = A || B; <br />
<code class="language-plaintext highlighter-rouge">A가 존재하지 않으면(false면) B.</code> <code class="language-plaintext highlighter-rouge">존재하면(true면) A.</code></li>
      <li>target.textContent = A ?? B; <br />
<code class="language-plaintext highlighter-rouge">A가 Null 또는 Undefined면 B.</code> <code class="language-plaintext highlighter-rouge">그 외엔 A.</code></li>
      <li>mines.includes(A&amp;&amp;B);<br />
<code class="language-plaintext highlighter-rouge">A가 존재하면(true면) B.</code> <code class="language-plaintext highlighter-rouge">존재하지 않으면(false면) A.</code></li>
    </ul>
  </li>
</ul>

<hr />

<ul>
  <li>
    <h3 id="maximum-call-stack-size-exceeded-에러">Maximum call stack size exceeded 에러</h3>
    <ul>
      <li>재귀할 때 자주 나오는 오류 중 하나.</li>
      <li>최대 호출 스택 사이즈를 초과했다는 의미. <code class="language-plaintext highlighter-rouge">호출 스택</code>의 관점으로 봐야한다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">OnLeftClick()</code>위에 <code class="language-plaintext highlighter-rouge">openAround()</code>가 여러 개가 얹어지면서 호출만 하고 끝나지 않는 상황이 발생하여 <code class="language-plaintext highlighter-rouge">호출 스택</code>의 사이즈를 넘어가는 상황이 벌어진다.</li>
          <li>그럴 땐 비동기 코드로 감싸주고(<code class="language-plaintext highlighter-rouge">setTimeout()</code>) <code class="language-plaintext highlighter-rouge">백그라운드</code>와 <code class="language-plaintext highlighter-rouge">태스크 큐</code>에 할당하면 된다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
:ET