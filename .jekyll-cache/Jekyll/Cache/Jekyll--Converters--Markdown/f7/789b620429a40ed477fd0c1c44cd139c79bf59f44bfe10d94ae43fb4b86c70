I"X<h2 id="카드-짝맞추기feat이벤트루프"><strong>카드 짝맞추기(feat.이벤트루프)</strong></h2>

<h3 id="20210512-concentrationhtml"><code class="language-plaintext highlighter-rouge">2021.05.12</code> <a href="https://github.com/WaterMinCho/JS/blob/main/concentration.html">concentration.html</a></h3>

<h3 id="플로우"><strong>플로우</strong></h3>

<ul>
  <li>
    <p align="center">&lt;img src = https://user-images.githubusercontent.com/74204327/117998950-56002280-b37f-11eb-8b41-cc893439d320.png height = 350px width = 430px&gt;</p>
    <p><br /></p>
  </li>
</ul>

<h3 id="배운-개념"><strong>배운 개념</strong></h3>

<ul>
  <li>
    <p>concat()</p>

    <ul>
      <li>concat()메서드는 인자로 주어진 배열이나 값들을 기존 배열에 합쳐서 새 배열을 반환한다.
        <ul>
          <li>메서드를 호출한 배열 뒤에 각 인수를 순서대로 붙인다.</li>
          <li>인수가 배열이면 그 요소가 순서대로 붙고, 배열이 아니면 인수 자체가 붙는다. 중첩 배열 내부로 재귀하지 않는다.</li>
          <li><code class="language-plaintext highlighter-rouge">기존 배열을 변경하지 않는다!</code></li>
          <li>추가된 새 배열을 반환한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>버그</p>

    <ul>
      <li>버그1: 처음 카드 보여줄 때 카드 클릭이 가능하면 안된다.</li>
      <li><code class="language-plaintext highlighter-rouge">clickable</code> 변수로 막을 수 있다.
        <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">clickable</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">.</span>
<span class="p">.</span>
<span class="p">.</span>
<span class="kd">function</span> <span class="nx">onCLickCard</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">clickable</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//clickable이 false면 onClickCard실행 불가.(return으로 아랫줄 실행 막음)</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="p">.</span>
    <span class="p">.</span>
    <span class="p">.</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">startGame</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">clickable</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">.</span>
    <span class="p">.</span>
    <span class="p">.</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.card</span><span class="dl">"</span><span class="p">).</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">card</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">card</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">flipped</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">});</span>
      <span class="nx">clickable</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">//카드를 감출 때 true값으로 변환.</span>
    <span class="p">},</span> <span class="mi">5000</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>버그2, 버그3: 이미 짝이 맞춰진 카드를 선택해도 카드가 다시 뒤집힌다. / 한 카드를 두 번 연달아 클릭하면 더 이상 그 카드가 클릭되지 않는다.</p>
      </li>
      <li>버그1에서 수정한 if조건문에 추가한다.</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">function</span> <span class="nx">onCLickCard</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">clickable</span> <span class="o">||</span> <span class="nx">completed</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="o">||</span><span class="nx">clicked</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">===</span><span class="k">this</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//이미 완성된 카드거나 연달아 클릭하는 경우</span>
      <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="p">.</span>
      <span class="p">.</span>
      <span class="p">.</span>
      <span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li><u>`버그4`: 서로 다른 네 가지 색의 카드를 연달아 클릭하면 마지막 두 카드가 앞면을 보인 채 남아 있다.(중요. `이벤트루프와 호출스택`을 알아야 수정이 가능하다.</u></li>
      <li><strong><em>호출 스택, 이벤트 루프, 백그라운드, 태스크 큐</em></strong>
        <ul>
          <li><strong>백그라운드</strong>는 타이머를 처리하고 이벤트 리스너를 저장하는 공간이다. <code class="language-plaintext highlighter-rouge">setTimeout</code>함수가 실행되면 백그라운드에서 시간을 재고 해당 시간이 되면 <code class="language-plaintext highlighter-rouge">setTimeout</code>의 <code class="language-plaintext highlighter-rouge">콜백 함수</code>를 <code class="language-plaintext highlighter-rouge">태스크 큐</code>로 전달한다. <br />
또한 <code class="language-plaintext highlighter-rouge">addEventListener</code>로 추가한 이벤트를 저장했다가 이벤트가 발생하면 <code class="language-plaintext highlighter-rouge">콜백 함수</code>를 <code class="language-plaintext highlighter-rouge">태스크 큐</code>로 보낸다. <code class="language-plaintext highlighter-rouge">백그라운드</code>에서 코드를 실행하는 것이 아니라 실행될 <code class="language-plaintext highlighter-rouge">콜백 함수</code>들이 <code class="language-plaintext highlighter-rouge">태스크 큐</code>로 들어간다는 것을 명심하자. <br /></li>
          <li><strong>태스크 큐</strong>는 실행돼야 할 콜백 함수들이 순서대로 대기하고 있는 공간이다. 즉 <code class="language-plaintext highlighter-rouge">태스크 큐</code>에 먼저 들어온 함수부터 실행된다는 것이다. 하지만 <code class="language-plaintext highlighter-rouge">태스크 큐</code>도 함수를 직접 실행하지 않는다. <br /></li>
          <li><strong>이벤트 루프</strong>는 <code class="language-plaintext highlighter-rouge">태스크 큐</code>에서 <code class="language-plaintext highlighter-rouge">호출 스택</code>으로 함수를 이동시키는 존재다. <code class="language-plaintext highlighter-rouge">호출 스택</code>이 비어 있으면 <code class="language-plaintext highlighter-rouge">이벤트 루프</code>는 <code class="language-plaintext highlighter-rouge">태스크 큐</code>에서 함수를 순서대로 꺼내어 <code class="language-plaintext highlighter-rouge">호출 스택</code>으로 옮긴다. 호출 스택으로 이동한 함수는 그때 실행된다. 실행이 완료된 함수는 <code class="language-plaintext highlighter-rouge">호출 스택</code>에서 빠지고 <code class="language-plaintext highlighter-rouge">호출 스택</code>이 비어있으면 <code class="language-plaintext highlighter-rouge">이벤트 루프</code>는 <code class="language-plaintext highlighter-rouge">태스크 큐</code>에 있는 다음 함수를 <code class="language-plaintext highlighter-rouge">호출 스택</code>으로 옮긴다.
<br /><br /> - 변수나 함수의 선언은 <code class="language-plaintext highlighter-rouge">호출 스택</code>과 <code class="language-plaintext highlighter-rouge">이벤트 루프</code>에 영향을 주지 않는다! - 선언은 <code class="language-plaintext highlighter-rouge">스코프</code>의 영역이다. - <code class="language-plaintext highlighter-rouge">호출 스택</code>과 <code class="language-plaintext highlighter-rouge">이벤트 루프</code>는 함수 호출과 밀접한 관련이 있다. - 자바스크립트 엔진은 자바스크립트 소스 코드가 처음 실행되는 순간(script태그)도 하나의 함수가 실행된다고 판단하고 크롬은 이를 <code class="language-plaintext highlighter-rouge">anonymous함수</code>로 표시한다. 참고로 호출 스택을 보고 싶다면 <code class="language-plaintext highlighter-rouge">console.trace</code>를 사용하여 콘솔창에 출력가능하다.
<br /><br /></li>
        </ul>
      </li>
      <li>실습코드를 보면 호출 스택의 흐름은 anonymous인 -&gt; startGame()인 -&gt; shuffle()인-&gt; shuffle()아웃 -&gt; createCard()인 -&gt; createCard()아웃 -&gt; appendChild()인 -&gt; appendChild()아웃 … 식으로 흘러가며 addEventListener와 setTimeout()를 만나면 해당 이벤트는 백그라운드에 저장한다.</li>
      <li>그럼 <code class="language-plaintext highlighter-rouge">startGame()</code>이 끝나면 호출 스택에서 대기중인 함수는 사실상 없지만 <code class="language-plaintext highlighter-rouge">백그라운드</code>에는 <code class="language-plaintext highlighter-rouge">클릭이벤트와 타이머</code>가 남아있다는 사실! 그러면 대부분의 비동기코드들이 백그라운드에 있다고 생각하면 될 것 같다.</li>
    </ul>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="dl">"</span><span class="s2">.card</span><span class="dl">"</span><span class="p">).</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">card</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">card</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">flipped</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">},</span> <span class="mi">1000</span> <span class="o">+</span> <span class="mi">200</span> <span class="o">*</span> <span class="nx">index</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>    </div>

    <ul>
      <li>
        <p>위 코드에서 1초타이머의 콜백함수는 card.classList.add(“flipped”); 이 구간인데 이 구간이 바로 <code class="language-plaintext highlighter-rouge">태스크 큐</code>에 쌓여있고 방금같은 상황에 호출스택이 비어있으니 <code class="language-plaintext highlighter-rouge">이벤트루프</code>가 <code class="language-plaintext highlighter-rouge">태스크 큐</code>의 해당 함수를 <code class="language-plaintext highlighter-rouge">호출 스택</code>으로 전달한다(실행을 하려면 호출 스택으로 쌓여져있어야 하기 때문).</p>
      </li>
      <li>
        <h3 id="그럼-뭐가-문젠데">그럼 뭐가 문젠데?</h3>

        <ul>
          <li>
            <p>4개를 연속 선택했을 때 연속된 카드를 1,2,3,4번 카드라고 가정해보자.<br /></p>

            <ol>
              <li>호출 스택에 클릭 콜백함수를 거쳐 <code class="language-plaintext highlighter-rouge">push()</code>로 실행되어 clicked === [1번 카드] 상태</li>
              <li>2번 카드의 클릭 콜백 함수가 실행될 때는 clicked배열에 두 카드가 추가</li>
              <li>색이 다르니 <code class="language-plaintext highlighter-rouge">setTimeout</code>이 실행될거고 0.6초 타이머가 백그라운드에 생성되어 대기상태. 여기서 핵심을 알 수 있다. 태스크 큐에 들어온 순서대로 호출 스택으로 가다보니 0.6초 타이머의 콜백함수보다 3번 카드의 클릭 콜백 함수가 먼저 실행되는 것이다.</li>
              <li>3번의 시점에선 호출 스택으로 <code class="language-plaintext highlighter-rouge">clicked배열</code>에 [1,2]가 들어가 있고 <code class="language-plaintext highlighter-rouge">태스크 큐</code>엔 3번4번이 대기중이며, <code class="language-plaintext highlighter-rouge">백그라운드</code>엔 addEventListener(12), setTimeout 600ms가 대기중이다.</li>
              <li>3번이 호출 스택에 추가되고 1번을 거친다. <code class="language-plaintext highlighter-rouge">clicked</code>===[1,2,3] / <code class="language-plaintext highlighter-rouge">태스크 큐:</code> 4번 / <code class="language-plaintext highlighter-rouge">백그라운드:</code> addEventListener(12), setTimeout 600ms, setTimeout 600ms</li>
              <li><code class="language-plaintext highlighter-rouge">clicked</code>===[1,2,3,4] / <code class="language-plaintext highlighter-rouge">태스크 큐:</code> empty / <code class="language-plaintext highlighter-rouge">백그라운드:</code> addEventListener(12), setTimeout 600ms,setTimeout 600ms, setTimeout 600ms</li>
              <li><code class="language-plaintext highlighter-rouge">clicked</code>===[1,2,3,4] / <code class="language-plaintext highlighter-rouge">태스크 큐:</code> setTimeout 600ms,setTimeout 600ms, setTimeout 600ms / <code class="language-plaintext highlighter-rouge">백그라운드:</code> addEventListener(12)</li>
              <li>setTimeout600ms의 콜백함수인</li>
            </ol>

            <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">clicked</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">flipped</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">clicked</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">flipped</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">clicked</span> <span class="o">=</span> <span class="p">[];</span>
</code></pre></div>            </div>

            <p>를 실행하는데 위의 과정으로 <u>3번과 4번은 remove('flipped')가 적용이 안된 채로 남아있고 clicked 배열을 비우는 것이 문제인걸 확인했다..</u>
<br /><br />
카드를 뒷면으로 뒤집고 clicked를 []로 초기화하기 전에 3,4번 카드의 클릭 이베느 콜백이 실행되는게 문제기 때문에 실행되더라도 아무 일도 하지 않게 만들면 된다.
<br />
그렇다면 <strong>카드가 2장이 될 때 clickable을 true로 만들어서 세 번째 카드부터는 클릭해도 아무것도 하지 않고 끝나게 하자</strong>
<br />
카드가 2장이 될 때 <code class="language-plaintext highlighter-rouge">clickable</code>을 <code class="language-plaintext highlighter-rouge">false</code>로 만들어서 세 번째 카드부터는 클릭해도 아무것도 하지 않고 끝나게 하자.</p>

            <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">onCLickCard</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">clickable</span> <span class="o">||</span> <span class="nx">completed</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="o">||</span> <span class="nx">clicked</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="k">this</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nx">toggle</span><span class="p">(</span><span class="dl">"</span><span class="s2">flipped</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">clicked</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">clicked</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">firstBackColor</span> <span class="o">=</span>
    <span class="nx">clicked</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.card-back</span><span class="dl">"</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">secondBackColor</span> <span class="o">=</span>
    <span class="nx">clicked</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">.card-back</span><span class="dl">"</span><span class="p">).</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">firstBackColor</span> <span class="o">===</span> <span class="nx">secondBackColor</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">completed</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">clicked</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nx">completed</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">clicked</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="nx">clicked</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">completed</span><span class="p">.</span><span class="nx">length</span> <span class="o">!==</span> <span class="nx">total</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">축하합니다.</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">resetGame</span><span class="p">();</span>
    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>

    <span class="k">return</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">clickable</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">//추가</span>
  <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">clicked</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">flipped</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">clicked</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">"</span><span class="s2">flipped</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">clicked</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nx">clickable</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">//추가</span>
  <span class="p">},</span> <span class="mi">600</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>            </div>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="느낀-점-코드를-작성할-때는-스코프를-고려해야-하고-짜여진-코드를-분석할-땐-이벤트루프개념을-고려해야겠다는-생각이-들었다-그리고-실행컨텍스트를-따로-정리하는-시간을-가져야겠다는-생각도-들었다-반드시-하자">느낀 점: 코드를 작성할 때는 스코프를 고려해야 하고 짜여진 코드를 분석할 땐 이벤트루프개념을 고려해야겠다는 생각이 들었다. 그리고 실행컨텍스트를 따로 정리하는 시간을 가져야겠다는 생각도 들었다. (반드시 하자!)</h4>
  </li>
</ul>
:ET